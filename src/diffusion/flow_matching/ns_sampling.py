FM_DATA = dict(
    step5=dict(
        timedeltas=[0.0521, 0.1475, 0.2114, 0.2797, 0.3092],
        coeffs=[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-1.2600,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 1.3800, -2.2600,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000, -0.9200,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000, -0.7000,  0.0000]]
    ),
    step6=dict(
        timedeltas=[0.0391, 0.0924, 0.1650, 0.2015, 0.2511, 0.2511],
        coeffs=[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-1.2200,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 1.1200, -2.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.3000,  0.9000, -1.5600,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000, -0.7400,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  0.0000, -0.6200,  0.0000]]
    ),
    step7=dict(
        timedeltas=[0.0387, 0.0748, 0.1030, 0.1537, 0.1840, 0.2340, 0.2117],
        coeffs=[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-1.1100,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 1.0300, -1.9900,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0700,  0.4300, -1.5700,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.2100, -0.1500,  1.5300, -2.2900,  0.0000,  0.0000,  0.0000],
        [-0.0500,  0.0700, -0.2300,  0.6100, -1.3300,  0.0000,  0.0000],
        [-0.1700,  0.3100, -0.4100,  0.1700,  0.5900, -1.3100,  0.0000]]
    ),
    step8=dict(
        timedeltas=[0.0071, 0.0613, 0.0780, 0.1163, 0.1421, 0.1880, 0.2077, 0.1996],
        coeffs=[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-2.4300,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.6100, -1.5500,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.9900, -0.1100, -2.0700,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0500, -0.4900,  1.3300, -1.9300,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0500, -0.3300,  0.2300,  0.7300, -1.7100,  0.0000,  0.0000,  0.0000],
        [-0.0900,  0.2500, -0.2900,  0.0500,  0.6100, -1.4500,  0.0000,  0.0000],
        [-0.2300,  0.2100, -0.0100, -0.2500,  0.2500,  0.4100, -1.2500,  0.0000]]
    ),
    step9=dict(
        timedeltas=[0.0017, 0.0510, 0.0636, 0.0911, 0.1007, 0.1443, 0.1694, 0.1910, 0.1872],
        coeffs=[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000],
        [-6.1900,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000],
        [-0.1100, -0.8100,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000],
        [ 0.7300, -0.1700, -1.3700,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000],
        [ 0.3100, -0.0500,  0.1900, -1.4500,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000],
        [ 0.0300, -0.2300,  0.2900,  0.3500, -1.3500,  0.0000,  0.0000,  0.0000,
          0.0000],
        [-0.1900,  0.0500,  0.0100,  0.2100,  0.2500, -1.2300,  0.0000,  0.0000,
          0.0000],
        [-0.2300,  0.2100, -0.1300,  0.1700,  0.0900,  0.0900, -1.0900,  0.0000,
          0.0000],
        [-0.1700,  0.1500,  0.1100, -0.1900,  0.0300,  0.2300,  0.1700, -1.2100,
          0.0000]]
    ),
    step10=dict(
        timedeltas=[0.0016, 0.0538, 0.0347, 0.0853, 0.0853, 0.1198, 0.1351, 0.1650, 0.1788,
        0.1406],
        coeffs=[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [-7.8801,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [-0.4000, -0.7400,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [ 0.4800, -0.1800, -0.8600,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [ 0.2600, -0.0400, -0.0400, -1.2800,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [ 0.0000, -0.0600,  0.2600,  0.2600, -1.4200,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [-0.1000, -0.0600,  0.0800,  0.2000,  0.2200, -1.2400,  0.0000,  0.0000,
          0.0000,  0.0000],
        [-0.1800,  0.1400, -0.0800,  0.1000,  0.0800,  0.1400, -1.0600,  0.0000,
          0.0000,  0.0000],
        [-0.1200,  0.1600, -0.1000,  0.0400,  0.0800,  0.0600,  0.0800, -1.0200,
          0.0000,  0.0000],
        [-0.1600,  0.0200,  0.1400,  0.0000, -0.1400,  0.0800,  0.1400,  0.3400,
         -1.3800,  0.0000]]
    ),
    step15=dict(
        timedeltas=[0.0005, 0.0301, 0.0414, 0.0198, 0.0496, 0.0202, 0.0683, 0.0496, 0.0710,
        0.0817, 0.0817, 0.0998, 0.1171, 0.1081, 0.1613],
        coeffs=[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-8.2001,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-1.4800,  0.7600,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.3000,  0.1600, -1.5400,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.2800,  0.0400, -0.3800, -0.3400,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.0200,  0.0200, -0.0200, -0.0600, -0.6200,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.0800,  0.0400,  0.1000, -0.0200, -0.2400, -0.6200,  0.0000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.0400,  0.1400,  0.0800,  0.0600, -0.0800, -0.1400, -0.8000,  0.0000,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.1200,  0.0600,  0.0000,  0.1200,  0.0800, -0.0200, -0.1200, -0.6600,
          0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.0800,  0.0200,  0.0000,  0.0400,  0.0800,  0.1200, -0.0400, -0.0600,
         -0.7000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.1800,  0.0600,  0.0600, -0.0200,  0.0200, -0.0200,  0.0400,  0.0200,
          0.0000, -0.7000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.1200,  0.1000,  0.0000,  0.0000, -0.0400, -0.0400,  0.0000,  0.0600,
          0.0200, -0.1000, -0.4000,  0.0000,  0.0000,  0.0000,  0.0000],
        [-0.1000,  0.0600,  0.0200,  0.0000,  0.0200, -0.0200, -0.0200,  0.0000,
          0.0600, -0.0600, -0.1200, -0.4400,  0.0000,  0.0000,  0.0000],
        [-0.0600,  0.0600,  0.0200, -0.0200,  0.0000,  0.0000,  0.0000, -0.0200,
          0.0000,  0.0600, -0.0800, -0.1200, -0.4800,  0.0000,  0.0000],
        [-0.1200,  0.0000,  0.0200,  0.0400,  0.0400,  0.0400,  0.0200,  0.0200,
         -0.0200,  0.0000, -0.0200,  0.1400, -0.0400, -1.2800,  0.0000]]
    )
)



import torch

from src.diffusion.base.sampling import *
from src.diffusion.base.guidance import *
from src.diffusion.base.scheduling import *

from typing import Callable

def ode_step_fn(x, v, dt, s, w):
    return x + v * dt

import logging
logger = logging.getLogger(__name__)

class NeuralSolverSampler(BaseSampler):
    def __init__(
            self,
            num_steps: int = 250,
            scheduler: BaseScheduler = None,
            w_scheduler: BaseScheduler = None,
            step_fn: Callable = ode_step_fn,
            *args,
            **kwargs
    ):
        super().__init__(*args, **kwargs)
        self.scheduler = scheduler
        self.num_steps = num_steps
        self.step_fn = step_fn
        self.w_scheduler = w_scheduler

        assert self.scheduler is not None
        assert self.w_scheduler is not None or self.step_fn in [ode_step_fn, ]
        if self.w_scheduler is not None:
            if self.step_fn == ode_step_fn:
                logger.warning("current sampler is ODE sampler, but w_scheduler is enabled")
        self._register_parameters(num_steps)

    def _register_parameters(self, num_steps=2):
        assert num_steps in [5, 6, 7, 8, 9, 10, 15]
        data = FM_DATA[f"step{num_steps}"]
        self._raw_solver_coeffs = torch.tensor(data['coeffs'])
        self._raw_timedeltas = torch.tensor(data['timedeltas'])


    def _impl_sampling(self, net, images, labels):
        """
        sampling process of Euler sampler
        -
        """
        batch_size = images.shape[0]
        null_labels = torch.full_like(labels, self.null_class)
        labels = torch.cat([null_labels, labels], dim=0)
        x = x0 = images
        pred_trajectory = []
        t_cur = torch.zeros(1).to(images.device, images.dtype)
        timedeltas = self._raw_timedeltas.to(images.device, images.dtype)
        solver_coeffs = self._raw_solver_coeffs.to(images.device, images.dtype)
        t_cur = t_cur.repeat(batch_size)
        for i  in range(self.num_steps):
            cfg_x = torch.cat([x, x], dim=0)
            t = t_cur.repeat(2)
            out = net(cfg_x, t, labels)
            out = self.guidance_fn(out, self.guidance)
            pred_trajectory.append(out)
            out = torch.zeros_like(out)
            sum_solver_coeff = 0.0
            for j in range(i):
                out += solver_coeffs[i, j] * pred_trajectory[j]
                sum_solver_coeff += solver_coeffs[i, j]
            out += (1-sum_solver_coeff)*pred_trajectory[-1]
            v = out
            dt = timedeltas[i]
            x0 = self.step_fn(x, v, 1-t[0], s=0, w=0)
            x = self.step_fn(x, v, dt, s=0, w=0)
            t_cur += dt
        return x0